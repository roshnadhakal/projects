--admin
CREATE TABLE "ADMIN" 
(
    "ADMIN_ID" NUMBER,
    "ADMIN_NAME" VARCHAR2(100),
    "ADMIN_PASSWORD" VARCHAR2(100),
    PRIMARY KEY ("ADMIN_ID") ENABLE
);

--categories
CREATE TABLE "CATEGORIES" 
(
    "CATEGORY_ID" NUMBER(10,0),
    "CATEGORY_NAME" VARCHAR2(50),
    "CATEGORY_DESC" VARCHAR2(300),
    PRIMARY KEY ("CATEGORY_ID") ENABLE
);


--customers
CREATE TABLE "CUSTOMER" 
(
    "CUSTOMER_ID" NUMBER,
    "FIRSTNAME" VARCHAR2(100),
    "LASTNAME" VARCHAR2(100),
    "EMAIL" VARCHAR2(255),
    "PASSWORD" VARCHAR2(255),
    "PROFILE" VARCHAR2(255),
    "PHONE_NUMBER" VARCHAR2(20),
    "ADDRESS" VARCHAR2(255),
    "OTP" VARCHAR2(10),
    "STATUS" VARCHAR2(20),
    "REGISTER_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "RESET_TOKEN" VARCHAR2(100),
    "RESET_EXPIRES" NUMBER,
    PRIMARY KEY ("CUSTOMER_ID") ENABLE,
    CHECK (status IN ('active', 'inactive')) ENABLE
);

--traders
CREATE TABLE "TRADER" 
(
    "TRADER_ID" NUMBER,
    "FULL_NAME" VARCHAR2(100),
    "PHONE_NUM" VARCHAR2(20),
    "STREET" VARCHAR2(255),
    "CITY" VARCHAR2(100),
    "STATE" VARCHAR2(100),
    "ZIPCODE" VARCHAR2(20),
    "POSITION" VARCHAR2(100),
    "TRADER_PASSWORD" VARCHAR2(255),
    "BUSINESS_DESP" VARCHAR2(400),
    "EMAIL" VARCHAR2(100),
    PRIMARY KEY ("TRADER_ID") ENABLE
);

--products
CREATE TABLE "PRODUCTS" 
(
    "ADD_PRODUCT_ID" NUMBER,
    "PRODUCT_NAME" VARCHAR2(100),
    "PRODUCT_DESC" VARCHAR2(650),
    "PRICE" NUMBER(10,2),
    "IMAGE" VARCHAR2(255),
    "STOCK_AVAILABLE" NUMBER,
    "MIN_ORDER" NUMBER,
    "MAX_ORDER" NUMBER,
    "ALLERGY_INFO" VARCHAR2(600),
    "DATE_ADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "TRADER_ID" NUMBER(*,0),
    "CATEGORY_ID" NUMBER(*,0),
    "DEL" VARCHAR2(40),
    PRIMARY KEY ("ADD_PRODUCT_ID") ENABLE,
    FOREIGN KEY ("TRADER_ID") REFERENCES "TRADER" ("TRADER_ID") ENABLE,
    FOREIGN KEY ("CATEGORY_ID") REFERENCES "PRODUCTCATEGORY" ("CATEGORY_ID") ENABLE
);

--orderdetails
CREATE TABLE "ORDERDETAIL" 
(
    "ORDER_ID" NUMBER(*,0),
    "CUSTOMER_ID" NUMBER(*,0),
    "SLOT_ID" NUMBER(*,0),
    "QUANTITY_ORDERED" NUMBER(*,0),
    "PRICE" VARCHAR2(100),
    "STATUS" NUMBER(1,0),
    "ORDER_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "ADD_PRODUCT_ID" NUMBER(*,0),
    "PRODUCT_NAME" VARCHAR2(255),
    PRIMARY KEY ("ORDER_ID") ENABLE,
    CHECK (status IN (0, 1)) ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE,
    FOREIGN KEY ("ADD_PRODUCT_ID") REFERENCES "PRODUCTS" ("ADD_PRODUCT_ID") ENABLE
);

--cart
CREATE TABLE "CART" 
(
    "CART_ID" NUMBER(*,0),
    "CUSTOMER_ID" NUMBER(*,0),
    "ORDER_ID" NUMBER(*,0),
    "DATE_ADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    PRIMARY KEY ("CART_ID") ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE,
    FOREIGN KEY ("ORDER_ID") REFERENCES "ORDERDETAIL" ("ORDER_ID") ENABLE
);

--cartproduct
CREATE TABLE "CARTPRODUCT" 
(
    "CART_PRODUCT_ID" NUMBER(*,0),
    "CART_ID" NUMBER(*,0),
    "ADD_PRODUCT_ID" NUMBER(*,0),
    PRIMARY KEY ("CART_PRODUCT_ID") ENABLE,
    FOREIGN KEY ("CART_ID") REFERENCES "CART" ("CART_ID") ENABLE,
    FOREIGN KEY ("ADD_PRODUCT_ID") REFERENCES "PRODUCTS" ("ADD_PRODUCT_ID") ENABLE
);


--collectionslot
CREATE TABLE "COLLECTION_SLOT" 
(
    "SLOT_ID" NUMBER(*,0),
    "CUSTOMER_ID" NUMBER(*,0),
    "ORDER_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "COLLECTION_SLOT" VARCHAR2(255),
    "COLLECTION_DAY" VARCHAR2(250),
    PRIMARY KEY ("SLOT_ID") ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE
);


--fav_product
CREATE TABLE "FAV_PRODUCT" 
(
    "FAV_ID" NUMBER,
    "CUSTOMER_ID" NUMBER(*,0),
    "ADD_PRODUCT_ID" NUMBER(*,0),
    "DATE_ADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    PRIMARY KEY ("FAV_ID") ENABLE,
    FOREIGN KEY ("ADD_PRODUCT_ID") REFERENCES "PRODUCTS" ("ADD_PRODUCT_ID") ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE
);

--featured product
CREATE TABLE "FEATURED_PRODUCT" 
(
    "FEATURED_ID" NUMBER(*,0),
    "DESCRIPTION" VARCHAR2(255),
    PRIMARY KEY ("FEATURED_ID") ENABLE
);

--newsletter
CREATE TABLE "NEWSLETTER" 
(
    "NEWSLETTER_ID" NUMBER,
    "EMAIL" VARCHAR2(255),
    "NEWSLETTER_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    PRIMARY KEY ("NEWSLETTER_ID") ENABLE
);

--offer
CREATE TABLE "OFFER" 
(
    "HEADING1" VARCHAR2(255),
    "HEADING2" VARCHAR2(255),
    "HEADING3" VARCHAR2(255),
    "HEADING4" VARCHAR2(255),
    "HEADING5" VARCHAR2(255)
);

--our_brands table
CREATE TABLE "OUR_BRANDS" 
(
    "BRAND_ID" NUMBER,
    "DESCRIPTION" VARCHAR2(255),
    PRIMARY KEY ("BRAND_ID") ENABLE
);


--payment table
CREATE TABLE "PAYMENT" 
(
    "PAYMENT_ID" NUMBER(*,0),
    "FIRST_NAME" VARCHAR2(255),
    "LAST_NAME" VARCHAR2(255),
    "EMAIL" VARCHAR2(255),
    "MOBILE_NO" VARCHAR2(20),
    "ADDRESS" VARCHAR2(500),
    "STATUS" NUMBER(1,0),
    "PAYMENT_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "CUSTOMER_ID" NUMBER(*,0),
    CHECK (status IN (0, 1)) ENABLE,
    PRIMARY KEY ("PAYMENT_ID") ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE
);


--shipping_address table
CREATE TABLE "SHIPPING_ADDRESS" 
(
    "ADDRESS_ID" NUMBER(*,0),
    "FIRST_NAME" VARCHAR2(255),
    "LAST_NAME" VARCHAR2(255),
    "EMAIL" VARCHAR2(255),
    "MOBILE_NO" VARCHAR2(20),
    "ADDRESS" VARCHAR2(500),
    "COUNTRY" VARCHAR2(255),
    "CITY" VARCHAR2(255),
    "STATE" VARCHAR2(255),
    "ZIPCODE" VARCHAR2(20),
    "STATUS" NUMBER(1,0),
    "ORDER_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "CUSTOMER_ID" NUMBER(*,0),
    CHECK (status IN (0, 1)) ENABLE,
    PRIMARY KEY ("ADDRESS_ID") ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE
);

--shop table
CREATE TABLE "SHOP" 
(
    "SHOP_ID" NUMBER(*,0),
    "TRADER_ID" NUMBER(*,0),
    "SHOP_NAME" VARCHAR2(255),
    "SHOP_TYPE" VARCHAR2(100),
    PRIMARY KEY ("SHOP_ID") ENABLE,
    FOREIGN KEY ("TRADER_ID") REFERENCES "TRADER" ("TRADER_ID") ENABLE
);

--slider table
CREATE TABLE "SLIDER" 
(
    "ID" NUMBER,
    "IMAGE" VARCHAR2(255),
    PRIMARY KEY ("ID") ENABLE
);

--testimony table
CREATE TABLE "TESTIMONY" 
(
    "ID" NUMBER(*,0),
    "TRUSTED_SHOPPING" VARCHAR2(400),
    "QUALITY_PRODUCT" VARCHAR2(400),
    "WORLDWIDE_DELIVERY" VARCHAR2(400),
    "TELEPHONE" VARCHAR2(255),
    PRIMARY KEY ("ID") ENABLE
);

--userreview table
CREATE TABLE "USERREVIEW" 
(
    "REVIEW_ID" NUMBER(*,0),
    "CUSTOMER_ID" NUMBER(*,0),
    "ADD_PRODUCT_ID" NUMBER(*,0),
    "NAME" VARCHAR2(255),
    "EMAIL" VARCHAR2(255),
    "REVIEW" VARCHAR2(255),
    "RATING" FLOAT(126),
    "REVIEW_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
    "STATUS" VARCHAR2(20),
    CHECK (status IN ('active', 'inactive')) ENABLE,
    PRIMARY KEY ("REVIEW_ID") ENABLE,
    FOREIGN KEY ("CUSTOMER_ID") REFERENCES "CUSTOMER" ("CUSTOMER_ID") ENABLE,
    FOREIGN KEY ("ADD_PRODUCT_ID") REFERENCES "PRODUCTS" ("ADD_PRODUCT_ID") ENABLE
);





CREATE OR REPLACE TRIGGER "TRG_AUTO_INCREMENT_CART_ID" 
BEFORE INSERT ON cart
FOR EACH ROW
BEGIN
    SELECT cart_seq.NEXTVAL INTO :new.cart_id FROM dual;
END;
/
ALTER TRIGGER "TRG_AUTO_INCREMENT_CART_ID" ENABLE;
/

CREATE OR REPLACE TRIGGER "CARTPRODUCT_BEFORE_INSERT" 
BEFORE INSERT ON cartproduct
FOR EACH ROW
BEGIN
  :NEW.cart_product_id := cartproduct_seq.NEXTVAL;
END;
/
ALTER TRIGGER "CARTPRODUCT_BEFORE_INSERT" ENABLE;
/

CREATE OR REPLACE TRIGGER "CATEGORY_T" 
BEFORE INSERT ON "CATEGORIES"
FOR EACH ROW
BEGIN
  IF :NEW."CATEGORY_ID" IS NULL THEN
    SELECT "CATEGORY_SEQ".NEXTVAL INTO :NEW."CATEGORY_ID" FROM dual;
  END IF;
END;
/
ALTER TRIGGER "CATEGORY_T" ENABLE;
/
CREATE OR REPLACE TRIGGER "SLOT_TRIGGER" 
BEFORE INSERT ON COLLECTION_SLOT
FOR EACH ROW
BEGIN
    SELECT SLOT_SEQ.NEXTVAL INTO :NEW.SLOT_ID FROM DUAL;
END;
/
ALTER TRIGGER "SLOT_TRIGGER" ENABLE;
/
CREATE OR REPLACE TRIGGER "CUSTOMER_ID_TRIGGER" 
BEFORE INSERT ON customer
FOR EACH ROW
BEGIN
    SELECT customer_id_seq.NEXTVAL INTO :new.customer_id FROM dual;
END;
/
ALTER TRIGGER "CUSTOMER_ID_TRIGGER" ENABLE;
/

CREATE OR REPLACE TRIGGER "FAV_PRODUCT_TRIGGER" 
BEFORE INSERT ON FAV_PRODUCT
FOR EACH ROW
BEGIN
  :NEW.FAV_ID := FAV_PRODUCT_SEQ.NEXTVAL;
END;
/
ALTER TRIGGER "FAV_PRODUCT_TRIGGER" ENABLE;
/
CREATE OR REPLACE TRIGGER "NEWSLETTER_TRIGGER" 
BEFORE INSERT ON newsletter
FOR EACH ROW
BEGIN
    SELECT newsletter_seq.NEXTVAL INTO :new.newsletter_id FROM dual;
END;
/
ALTER TRIGGER "NEWSLETTER_TRIGGER" ENABLE;
/

CREATE OR REPLACE TRIGGER "ORDERDETAIL_BEFORE_INSERT" 
BEFORE INSERT ON orderdetail
FOR EACH ROW
BEGIN
  :NEW.order_id := orderdetail_seq.NEXTVAL;
END;
/
ALTER TRIGGER "ORDERDETAIL_BEFORE_INSERT" ENABLE;
/


CREATE OR REPLACE TRIGGER "PAYMENT_BEFORE_INSERT" 
BEFORE INSERT ON payment
FOR EACH ROW
BEGIN
  :NEW.payment_id := payment_seq.NEXTVAL;
END;
/
ALTER TRIGGER "PAYMENT_BEFORE_INSERT" ENABLE;
/

CREATE OR REPLACE TRIGGER "PRODUCT_TRIGGER" 
BEFORE INSERT ON products
FOR EACH ROW
BEGIN
    SELECT product_seq.NEXTVAL INTO :new.add_product_id FROM dual;
END;
/
ALTER TRIGGER "PRODUCT_TRIGGER" ENABLE;
/

CREATE OR REPLACE TRIGGER "SHIPPING_ADDRESS_BEFORE_INSERT" 
BEFORE INSERT ON shipping_address
FOR EACH ROW
BEGIN
  :NEW.address_id := shipping_address_seq.NEXTVAL;
END;
/
ALTER TRIGGER "SHIPPING_ADDRESS_BEFORE_INSERT" ENABLE;
/
CREATE OR REPLACE TRIGGER "SLIDER_TRIGGER" 
BEFORE INSERT ON Slider
FOR EACH ROW
BEGIN
    SELECT slider_id_seq.nextval INTO :new.id FROM dual;
END;
/
ALTER TRIGGER "SLIDER_TRIGGER" ENABLE;
/

CREATE OR REPLACE TRIGGER "USERREVIEW_BEFORE_INSERT" 
BEFORE INSERT ON userreview
FOR EACH ROW
BEGIN
  :NEW.review_id := userreview_seq.NEXTVAL;
END;
/
ALTER TRIGGER "USERREVIEW_BEFORE_INSERT" ENABLE;
/


CREATE OR REPLACE TRIGGER "TRADER_ID_TRIGGER" 
BEFORE INSERT ON TRADER
FOR EACH ROW
BEGIN
    SELECT trader_id_seq.NEXTVAL INTO :new.trader_id FROM dual;
END;
/
ALTER TRIGGER "TRADER_ID_TRIGGER" ENABLE;
/

CREATE OR REPLACE TRIGGER "ADMIN_ID_TRIGGER" 
BEFORE INSERT ON ADMIN
FOR EACH ROW
BEGIN
    SELECT admin_id_seq.NEXTVAL INTO :new.admin_id FROM dual;
END;
/
ALTER TRIGGER "ADMIN_ID_TRIGGER" ENABLE;
/

CREATE OR REPLACE FUNCTION hash_password(p_password IN VARCHAR2) RETURN VARCHAR2 IS
  v_hashed_password VARCHAR2(2000);
BEGIN
  -- Use DBMS_OBFUSCATION_TOOLKIT.MD5 to hash the password
  SELECT LOWER(RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.MD5(INPUT_STRING => UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8'))))
  INTO v_hashed_password
  FROM DUAL;
  
  RETURN v_hashed_password;
END;
/

UPDATE ADMIN
SET ADMIN_PASSWORD = hash_password(ADMIN_PASSWORD);

CREATE OR REPLACE TRIGGER hash_admin_password
BEFORE INSERT OR UPDATE ON ADMIN
FOR EACH ROW
DECLARE
BEGIN
  -- Check if the password is being updated
  IF :NEW.ADMIN_PASSWORD <> :OLD.ADMIN_PASSWORD OR :OLD.ADMIN_PASSWORD IS NULL THEN
    :NEW.ADMIN_PASSWORD := hash_password(:NEW.ADMIN_PASSWORD);
  END IF;
END;
/